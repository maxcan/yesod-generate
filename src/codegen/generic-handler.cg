{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE ScopedTypeVariables #-}
module Handler.~{modelNameUpper} 
  ( get~{modelNameUpper}R
  , post~{modelNameUpper}R
  , get~{modelNameUpper}NewR
  , get~{modelNameUpper}DetailR
  , put~{modelNameUpper}DetailR
  , delete~{modelNameUpper}DetailR
  , get~{modelNameUpper}EditR
  )
  where

import Import
import qualified Data.Text as DT
import Data.Aeson
import qualified Data.HashMap.Lazy as HML

optionsPersistKey
  :: (YesodPersist master
     , PersistEntity a
     , PersistQuery (YesodPersistBackend master) (GHandler sub master)
     , PathPiece (Key (YesodPersistBackend master) a)
     , RenderMessage master msg
     , PersistEntityBackend a ~ YesodPersistBackend master) 
  => [Filter a] 
  -> [SelectOpt a] 
  -> (Entity a -> msg) 
  -> GHandler sub master (OptionList (Key (PersistEntityBackend a) a))
optionsPersistKey filts ords toDisplay = fmap mkOptionList $ do
    mr <- getMessageRender
    pairs <- runDB $ selectList filts ords
    return $ map (\(Entity key value) -> Option
        { optionDisplay = mr (toDisplay $ Entity key value)
        , optionInternalValue = key
        , optionExternalValue = toPathPiece key
        }) pairs

~{modelNameLower}Form :: Maybe ~{modelNameUpper} -> Form ~{modelNameUpper}
~{modelNameLower}Form m~{modelNameUpper} = ~{renderFxn} $ ~{modelNameUpper}
~{generatedFormFields}

get~{modelNameUpper}R           :: Handler RepHtmlJson
post~{modelNameUpper}R          :: Handler RepHtml
get~{modelNameUpper}NewR        :: Handler RepHtml
get~{modelNameUpper}DetailR     :: ~{modelNameUpper}Id -> Handler RepHtmlJson
put~{modelNameUpper}DetailR     :: ~{modelNameUpper}Id -> Handler RepHtml
delete~{modelNameUpper}DetailR  :: ~{modelNameUpper}Id -> Handler RepHtml
get~{modelNameUpper}EditR       :: ~{modelNameUpper}Id -> Handler RepHtml


instance ToJSON (Entity ~{modelNameUpper}) where
  toJSON (Entity k v) = case toJSON v of
    Object o -> Object $ HML.insert "id" (toJSON k) o
    _ -> error "unexpect JS encode erorr"

get~{modelNameUpper}R = do
  (all~{modelNameUpper}s :: [Entity ~{modelNameUpper}]) <- runDB $ selectList [] []
  defaultLayoutJson $(widgetFile "~{modelNameLower}/index") all~{modelNameUpper}s

post~{modelNameUpper}R = do
  ((formResult, formWidget), enctype) <- runFormPost $ ~{modelNameLower}Form Nothing
  case formResult of
    FormSuccess ~{modelNameLower} -> do
      ~{modelNameLower}Id <- runDB $ insert ~{modelNameLower}
      setMessage "successfully added"
      redirect $ ~{modelNameUpper}DetailR ~{modelNameLower}Id
    _ -> do 
      setMessage "form error"
      redirect ~{modelNameUpper}NewR
    
get~{modelNameUpper}NewR = do
  ((_, formWidget), enctype) <- generateFormPost $ ~{modelNameLower}Form Nothing
  defaultLayout $(widgetFile "~{modelNameLower}/new")
    
get~{modelNameUpper}DetailR ~{modelNameLower}Id = do
  ~{modelNameLower} <- runDB $ get404 ~{modelNameLower}Id
  defaultLayoutJson $(widgetFile "~{modelNameLower}/show") (Entity ~{modelNameLower}Id ~{modelNameLower})

put~{modelNameUpper}DetailR ~{modelNameLower}Id = do
  ((formResult, _), _) <- runFormPost $ ~{modelNameLower}Form Nothing
  case formResult of
    FormSuccess ~{modelNameLower} -> do
      ~{modelNameLower}Id <- runDB $ replace ~{modelNameLower}Id ~{modelNameLower}
      setMessage "successfully replaced"
    _ -> setMessage "form error"
  redirect $ ~{modelNameUpper}DetailR ~{modelNameLower}Id

delete~{modelNameUpper}DetailR ~{modelNameLower}Id = do 
  _ <- runDB $ get404 ~{modelNameLower}Id
  runDB $ delete ~{modelNameLower}Id
  setMessage . toHtml $ DT.concat ["Deleted ~{modelNameUpper} with id: ", toPathPiece ~{modelNameLower}Id]
  redirect ~{modelNameUpper}R


get~{modelNameUpper}EditR ~{modelNameLower}Id = do
  ~{modelNameLower} <- runDB $ get404 ~{modelNameLower}Id
  ((_, formWidget), enctype) <- generateFormPost $ ~{modelNameLower}Form (Just ~{modelNameLower})
  defaultLayout $(widgetFile "~{modelNameLower}/edit")

